/*************************************************************************
[题目]
  一步一个台阶，两个台阶，三个台阶，.......，直到最后一个台阶（第n阶）。问有多少种不同的方法可以爬到楼顶呢？
  （即每一步都可以选择跳一个台阶，两个，三个，...，n个）
**************************************************************************/

#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
  int climbStairs(int n) {
    vector<int> dp(n + 1, 0);
    dp[1] = 1;
    dp[2] = 2;                                      //dp[n]:爬到顶楼的方法数
    for (int i = 1; i <= n; i++) { 
      dp[i] = 1;
      for (int j = 1; j <= i - 1; j++) { 
        dp[i] += dp[j];                             //dp[n] = dp[n-1]+dp[n-2]+dp[n-3]+...+dp[1]+1
      }                                             //爬到某一阶的方法数为爬到该阶之前每一阶的方法数之和加1
    }                                               //也可以总结出规律：dp[n]=2^(n-1)
    return dp[n];
  }
};

int main(){

  return 0;
}